import 'package:flutter/material.dart';

String timeToSheet(TimeOfDay timeOfDay) {
  return '${timeOfDay.hour}:${timeOfDay.minute}';
}

TimeOfDay sheetToTime(String sheetTime) {
  return TimeOfDay(
      hour: int.parse(sheetTime.split(':')[0]),
      minute: int.parse(sheetTime.split(':')[1]));
}

DateTime sheetToDate(String sheetDate) {
  return DateTime(1900, 1, 3).add(Duration(days: int.parse(sheetDate) - 4));
}

SnackBar snackBar(String text) {
  return SnackBar(
      backgroundColor: Colors.black54,
      content: Text(
        text,
        style: const TextStyle(color: Colors.white),
        textAlign: TextAlign.center,
      ));
}

class MyColors {
  static const Color oliveGreen = Color(0xFF81b051);
  static const Color ceruleanBlue = Color(0xFF039BE5);
  static const Color ultramarineBlue = Color(0xFF7986CB);
  static const Color gunMetal = Color(0xFF575b6d);
  static const Color charCoal = Color(0xFF202123);
  static const Color springGreen = Color(0xFF69F0AF);
  static const Color platinum = Color(0xFFE0E3D2);
  static const Color eggBlue = Color(0xFF9AE0E3);
}

List<String> cellNames = [
  'A3',
  'B3',
  'C3',
  'D3',
  'E3',
  'F3',
  'G3',
  'A5',
  'B5',
  'C5',
  'D5',
  'E5',
  'F5',
  'G5',
  'A7',
  'B7',
  'C7',
  'D7',
  'E7',
  'F7',
  'G7',
  'A9',
  'B9',
  'C9',
  'D9',
  'E9',
  'F9',
  'G9',
  'A11',
  'B11',
  'C11',
  'D11',
  'E11',
  'F11',
  'G11',
  'A13',
  'B13',
  'C13',
  'D13',
  'E13',
  'F13',
  'G13',
  'A15',
  'B15',
  'C15',
  'D15',
  'E15',
  'F15',
  'G15',
  'A17',
  'B17',
  'C17',
  'D17',
  'E17',
  'F17',
  'G17',
  'A19',
  'B19',
  'C19',
  'D19',
  'E19',
  'F19',
  'G19',
  'A21',
  'B21',
  'C21',
  'D21',
  'E21',
  'F21',
  'G21',
  'A23',
  'B23',
  'C23',
  'D23',
  'E23',
  'F23',
  'G23',
  'A25',
  'B25',
  'C25',
  'D25',
  'E25',
  'F25',
  'G25',
  'A27',
  'B27',
  'C27',
  'D27',
  'E27',
  'F27',
  'G27',
  'A29',
  'B29',
  'C29',
  'D29',
  'E29',
  'F29',
  'G29',
  'A31',
  'B31',
  'C31',
  'D31',
  'E31',
  'F31',
  'G31',
  'A33',
  'B33',
  'C33',
  'D33',
  'E33',
  'F33',
  'G33',
  'A35',
  'B35',
  'C35',
  'D35',
  'E35',
  'F35',
  'G35',
  'A37',
  'B37',
  'C37',
  'D37',
  'E37',
  'F37',
  'G37',
  'A39',
  'B39',
  'C39',
  'D39',
  'E39',
  'F39',
  'G39',
  'A41',
  'B41',
  'C41',
  'D41',
  'E41',
  'F41',
  'G41',
  'A43',
  'B43',
  'C43',
  'D43',
  'E43',
  'F43',
  'G43',
  'A45',
  'B45',
  'C45',
  'D45',
  'E45',
  'F45',
  'G45',
  'A47',
  'B47',
  'C47',
  'D47',
  'E47',
  'F47',
  'G47',
  'A49',
  'B49',
  'C49',
  'D49',
  'E49',
  'F49',
  'G49',
  'A51',
  'B51',
  'C51',
  'D51',
  'E51',
  'F51',
  'G51',
  'A53',
  'B53',
  'C53',
  'D53',
  'E53',
  'F53',
  'G53',
  'A55',
  'B55',
  'C55',
  'D55',
  'E55',
  'F55',
  'G55',
  'A57',
  'B57',
  'C57',
  'D57',
  'E57',
  'F57',
  'G57',
  'A59',
  'B59',
  'C59',
  'D59',
  'E59',
  'F59',
  'G59',
  'A61',
  'B61',
  'C61',
  'D61',
  'E61',
  'F61',
  'G61',
  'A63',
  'B63',
  'C63',
  'D63',
  'E63',
  'F63',
  'G63',
  'A65',
  'B65',
  'C65',
  'D65',
  'E65',
  'F65',
  'G65',
  'A67',
  'B67',
  'C67',
  'D67',
  'E67',
  'F67',
  'G67',
  'A69',
  'B69',
  'C69',
  'D69',
  'E69',
  'F69',
  'G69',
  'A71',
  'B71',
  'C71',
  'D71',
  'E71',
  'F71',
  'G71',
  'A73',
  'B73',
  'C73',
  'D73',
  'E73',
  'F73',
  'G73',
  'A75',
  'B75',
  'C75',
  'D75',
  'E75',
  'F75',
  'G75',
  'A77',
  'B77',
  'C77',
  'D77',
  'E77',
  'F77',
  'G77',
  'A79',
  'B79',
  'C79',
  'D79',
  'E79',
  'F79',
  'G79',
  'A81',
  'B81',
  'C81',
  'D81',
  'E81',
  'F81',
  'G81',
  'A83',
  'B83',
  'C83',
  'D83',
  'E83',
  'F83',
  'G83',
  'A85',
  'B85',
  'C85',
  'D85',
  'E85',
  'F85',
  'G85',
  'A87',
  'B87',
  'C87',
  'D87',
  'E87',
  'F87',
  'G87',
  'A89',
  'B89',
  'C89',
  'D89',
  'E89',
  'F89',
  'G89',
  'A91',
  'B91',
  'C91',
  'D91',
  'E91',
  'F91',
  'G91',
  'A93',
  'B93',
  'C93',
  'D93',
  'E93',
  'F93',
  'G93',
  'A95',
  'B95',
  'C95',
  'D95',
  'E95',
  'F95',
  'G95',
  'A97',
  'B97',
  'C97',
  'D97',
  'E97',
  'F97',
  'G97',
  'A99',
  'B99',
  'C99',
  'D99',
  'E99',
  'F99',
  'G99',
  'A101',
  'B101',
  'C101',
  'D101',
  'E101',
  'F101',
  'G101',
  'A103',
  'B103',
  'C103',
  'D103',
  'E103',
  'F103',
  'G103',
  'A105',
  'B105',
  'C105',
  'D105',
  'E105',
  'F105',
  'G105',
  'A107',
  'B107',
  'C107',
  'D107',
  'E107',
  'F107',
  'G107',
  'A109',
  'B109',
  'C109',
  'D109',
  'E109',
  'F109',
  'G109'
];

extension TimeOfDayConverter on TimeOfDay {
  String to24hours() {
    final hour = this.hour.toString().padLeft(2, "0");
    final min = minute.toString().padLeft(2, "0");
    return "$hour:$min";
  }
}

extension DateOnlyCompare on DateTime {
  bool isSameDate(DateTime other) {
    return year == other.year && month == other.month && day == other.day;
  }
}

extension WeekNumberFromDate on DateTime {
  int weekNumber() {
    final firstJan = DateTime(DateTime.now().year, 1, 1);
    final from = DateTime.utc(firstJan.year, firstJan.month, firstJan.day);
    final to = DateTime.utc(year, month, day);
    return (to.difference(from).inDays / 7).ceil();
  }
}

extension DayNumberFromDate on DateTime {
  int dayNumberOfYear() {
    return difference(DateTime(year, 1, 1)).inDays;
  }
}

extension HexColor on Color {
  /// String is in the format "aabbcc" or "ffaabbcc" with an optional leading "#".
  static Color fromHex(String hexString) {
    final buffer = StringBuffer();
    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
    buffer.write(hexString.replaceFirst('#', ''));
    return Color(int.parse(buffer.toString(), radix: 16));
  }
}
